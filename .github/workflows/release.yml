name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.0.0)'
        required: true
        default: 'v1.3.0'
  push:
    tags:
      - v*.*.*

permissions:
  contents: write

env:
  GITHUB_CI: 1
  USE_HARD_LINKS: false

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
      fail-fast: false

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        id: pnpm-install
        with:
          run_install: false
          version: 10

      # - name: Get pnpm store directory
      #   id: pnpm-cache
      #   shell: bash
      #   run: |
      #     echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      # - uses: actions/cache@v4
      #   name: Setup pnpm cache
      #   with:
      #     path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
      #     key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pnpm-store

      - name: Install dependencies
        run: npm install --no-package-lock

      - name: Get release tag
        id: get-tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Build
        run: npm run build

      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd packages/m3u8dl-app
          npm install --no-package-lock
          npm run build -- --linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RENDERER_VITE_AIHUBMIX_SECRET: ${{ vars.RENDERER_VITE_AIHUBMIX_SECRET }}
          NODE_OPTIONS: --max-old-space-size=8192

      - name: Build Mac
        if: matrix.os == 'macos-latest'
        run: |
          cd packages/m3u8dl-app
          npm install --no-package-lock
          npm run build -- --mac
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ vars.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ vars.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ vars.APPLE_TEAM_ID }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=8192

      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd packages/m3u8dl-app
          npm install --no-package-lock
          npm run build -- --win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=8192

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          allowUpdates: true
          makeLatest: false
          tag: ${{ steps.get-tag.outputs.tag }}
          artifacts: 'packages/m3u8dl-app/dist/app/*.exe,packages/m3u8dl-app/dist/app/*.zip,packages/m3u8dl-app/dist/app/*.dmg,packages/m3u8dl-app/dist/app/*.AppImage,packages/m3u8dl-app/dist/app/*.snap,packages/m3u8dl-app/dist/app/*.deb,packages/m3u8dl-app/dist/app/*.rpm,packages/m3u8dl-app/dist/app/*.tar.gz,packages/m3u8dl-app/dist/app/latest*.yml,packages/m3u8dl-app/dist/app/rc*.yml,packages/m3u8dl-app/dist/app/*.blockmap'
          # artifacts: 'packages/m3u8dl-app/dist/app/*.{exe,zip,dmg,AppImage,deb,rpm,tar.gz,snap,yml,tar.gz,blockmap},packages/m3u8dl-app/dist/app/{latest,rc}*.yml'
          token: ${{ secrets.GITHUB_TOKEN }}
